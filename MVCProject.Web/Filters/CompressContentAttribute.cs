// -----------------------------------------------------------------------
// <copyright file="CompressContentAttribute.cs" company="ASK E-Sqaure">
// All copy rights reserved @ASK E-Sqaure.
// </copyright>
// ----------------------------------------------------------------------- 

namespace MVCProject
{
    using System;
    using System.Web;
    using System.Web.Configuration;
    using System.Web.Mvc;

    /// <summary>
    /// Attribute that can be added to controller methods to force content
    /// to be GZip encoded if the client supports it
    /// </summary>
    [AttributeUsage(AttributeTargets.Class)]
    public sealed class CompressContentAttribute : ActionFilterAttribute
    {
        /// <summary>
        /// Determines if GZip is supported
        /// </summary>
        /// <returns>returns true/false value</returns>
        public static bool IsGZipSupported()
        {
            string acceptEncoding = HttpContext.Current.Request.Headers["Accept-Encoding"];

            if (!string.IsNullOrEmpty(acceptEncoding) && (acceptEncoding.Contains("gzip") || acceptEncoding.Contains("deflate")))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Sets up the current page or handler to use GZip through a Response.Filter
        /// IMPORTANT:  
        /// You have to call this method before any output is generated!
        /// </summary>
        public static void GZipEncodePage()
        {
            HttpResponse response = HttpContext.Current.Response;

            if (IsGZipSupported())
            {
                string acceptEncoding = HttpContext.Current.Request.Headers["Accept-Encoding"];

                if (acceptEncoding.Contains("gzip"))
                {
                    response.Filter = new System.IO.Compression.GZipStream(response.Filter, System.IO.Compression.CompressionMode.Compress);
                    response.AppendHeader("Content-Encoding", "gzip");
                }
                else
                {
                    response.Filter = new System.IO.Compression.DeflateStream(response.Filter, System.IO.Compression.CompressionMode.Compress);
                    response.AppendHeader("Content-Encoding", "deflate");
                }
            }

            // Allow proxy servers to cache encoded and unencoded versions separately
            response.AppendHeader("Vary", "Content-Encoding");
        }

        /// <summary>
        /// Override to compress the content that is generated by
        /// an action method.
        /// </summary>
        /// <param name="filterContext">object of<see cref="ActionExecutingContext"/>class</param>
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (Convert.ToBoolean(WebConfigurationManager.AppSettings["IsCompressContent"].ToString()) && !HttpContext.Current.Request.Url.OriginalString.Contains("Audit/InternalAudit/GetDetailReport") && !HttpContext.Current.Request.Url.OriginalString.Contains("Base/DownloadReport"))
            {
                GZipEncodePage();
            }
        }
    }
}